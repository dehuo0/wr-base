# Fedora Compatibility Macros
#
# This file was generated by comparing the Fedora: rpm-4.12.0.1-9.fc22.src.rpm
# to the RPM5 macros in the Yocto Project.
#
# The License declared in that SRPM is:
# # Partially GPL/LGPL dual-licensed and some bits with BSD
# # SourceLicense: (GPLv2+ and LGPLv2+ with exceptions) and BSD 
# License: GPLv2+
#
# While this will not result in a perfect compatibility set, it should assist
# people attempting to build Fedora packages within a Yocto Project 
# environment.
#
# mgh - June 12, 2015
#

#==============================================================================
# ---- Generally useful path macros.
#

%__lzma			%{__xz} --format=lzma
%__restorecon		/sbin/restorecon
%__semodule		/usr/bin/semodule
%__bzr			/usr/bin/bzr
%__quilt		/usr/bin/quilt

#==============================================================================
# ---- Required rpmrc macros.
#       Macros that used to be initialized as a side effect of rpmrc parsing.
#       These are the default values that can be overridden by other
#       (e.g. per-platform, per-system, per-packager, per-package) macros.
#
#       The directory where rpm's configuration and scripts live
%getconfdir		%{_usrlibrpm}
%_rpmconfigdir		%{getconfdir}

# Note, fileattrs are not supported in RPM 5
%_fileattrsdir		%{_rpmconfigdir}/fileattrs

#       Template for debug information sub-package.
%debug_package \
%ifnarch noarch all\
%global __debug_package 1\
%package dbg\
Summary: Debug information for package %{name}\
Group: devel\
AutoReqProv: 0\
%description dbg\
This package provides debug information for package %{name}.\
Debug information is useful when developing applications that use this\
package or when debugging this package.\
%files dbg -f debugfiles.list\
%defattr(-,root,root)\
%endif\
%{nil}

%_defaultlicensedir	%{_datadir}/licenses

#_topdir		%{getenv:HOME}/rpmbuild

# Macro to fix broken permissions in sources
%_fixperms	%{__chmod} -Rf a+rX,u+w,g-w,o-w

#==============================================================================
# ---- Scriptlet template templates.
#       Global defaults used for building scriptlet templates.
#

%___build_pre   \
  RPM_SOURCE_DIR=\"%{u2p:%{_sourcedir}}\"\
  RPM_BUILD_DIR=\"%{u2p:%{_builddir}}\"\
  RPM_OPT_FLAGS=\"%{optflags}\"\
  RPM_LD_FLAGS=\"%{?__global_ldflags}\"\
  RPM_ARCH=\"%{_arch}\"\
  RPM_OS=\"%{_os}\"\
  export RPM_SOURCE_DIR RPM_BUILD_DIR RPM_OPT_FLAGS RPM_LD_FLAGS RPM_ARCH RPM_OS\
  RPM_DOC_DIR=\"%{_docdir}\"\
  export RPM_DOC_DIR\
  RPM_PACKAGE_NAME=\"%{name}\"\
  RPM_PACKAGE_VERSION=\"%{version}\"\
  RPM_PACKAGE_RELEASE=\"%{release}\"\
  export RPM_PACKAGE_NAME RPM_PACKAGE_VERSION RPM_PACKAGE_RELEASE\
  LANG=C\
  export LANG\
  unset CDPATH DISPLAY ||:\
  %{?buildroot:RPM_BUILD_ROOT=\"%{u2p:%{buildroot}}\"\
  export RPM_BUILD_ROOT}\
  %{?_javaclasspath:CLASSPATH=\"%{_javaclasspath}\"\
  export CLASSPATH}\
  PKG_CONFIG_PATH=\"${PKG_CONFIG_PATH}:%{_libdir}/pkgconfig:%{_datadir}/pkgconfig\"\
  export PKG_CONFIG_PATH\
  CONFIG_SITE=${CONFIG_SITE:-NONE}\
  export CONFIG_SITE\
  \
  %{verbose:set -x}%{!verbose:exec > /dev/null}\
  umask 022\
  cd \"%{u2p:%{_builddir}}\"\

#==============================================================================
# ---- specfile macros.
#       Macro(s) here can be used reliably for reproducible builds.
#       (Note: Above is the goal, below are the macros under development)
#
# The configure macro runs autoconf configure script with platform specific
# directory structure (--prefix, --libdir etc) and compiler flags
# such as CFLAGS.
#
# The configure macro should be invoked as %configure (rather than %{configure})
# because the rest of the arguments will be expanded using %*.
#
%_configure ./configure

#------------------------------------------------------------------------------
# The "make" analogue, hiding the _smp_mflags magic from specs
%make_build %{__make} %{?_smp_mflags}

#------------------------------------------------------------------------------
# Macros for further automated spec %setup and patch application

# default to plain patch
%__scm patch
# meh, figure something saner
%__scm_username rpm-build
%__scm_usermail <rpm-build>
%__scm_author %{__scm_username} %{__scm_usermail}

# Plain patch (-m is unused)
%__scm_setup_patch(q) %{nil}
%__scm_apply_patch(qp:m:)\
%{__patch} %{-p:-p%{-p*}} %{-q:-s}

# Mercurial (aka hg)
%__scm_setup_hg(q)\
%{__hg} init %{-q} .\
%{__hg} add %{-q} .\
%{__hg} commit %{-q} --user "%{__scm_author}" -m "%{name}-%{version} base"

%__scm_apply_hg(qp:m:)\
%{__hg} import - %{-p:-p%{-p*}} %{-q} -m %{-m*} --user "%{__scm_author}"

# Git
%__scm_setup_git(q)\
%{__git} init %{-q}\
%{__git} config user.name "%{__scm_username}"\
%{__git} config user.email "%{__scm_usermail}"\
%{__git} add .\
%{__git} commit %{-q} -a\\\
        --author "%{__scm_author}" -m "%{name}-%{version} base"

%__scm_apply_git(qp:m:)\
%{__git} apply --index %{-p:-p%{-p*}} -\
%{__git} commit %{-q} -m %{-m*} --author "%{__scm_author}"

# Git, using "git am" (-m is unused)
%__scm_setup_git_am(q)\
%{expand:%__scm_setup_git %{-q}}

%__scm_apply_git_am(qp:m:)\
%{__git} am %{-q} %{-p:-p%{-p*}}

# Quilt
%__scm_setup_quilt(q) %{nil}
%__scm_apply_quilt(qp:m:)\
%{__quilt} import %{-p:-p%{-p*}} %{1} && %{__quilt} push

# Bzr
%__scm_setup_bzr(q)\
%{__bzr} init %{-q}\
%{__bzr} whoami --branch "%{__scm_author}"\
%{__bzr} add .\
%{__bzr} commit %{-q} -m "%{name}-%{version} base"

# bzr doesn't seem to have its own command to apply patches?
%__scm_apply_bzr(qp:m:)\
%{__patch} %{-p:-p%{-p*}} %{-q:-s}\
%{__bzr} commit %{-q} -m %{-m*}

# Single patch application
%apply_patch(qp:m:)\
%{uncompress:%{1}} | %{expand:%__scm_apply_%{__scm} %{-q} %{-p:-p%{-p*}} %{-m:-m%{-m*}}}

# Automatically apply all patches
%autopatch(vp:)\
%{lua:\
local options = rpm.expand("%{!-v:-q} %{-p:-p%{-p*}} ")\
for i, p in ipairs(patches) do\
    print(rpm.expand("%apply_patch -m %{basename:"..p.."}  "..options..p.."\\n"))\
end}

# One macro to (optionally) do it all.
# -S<scm name>  Sets the used patch application style, eg '-S git' enables
#               usage of git repository and per-patch commits.
# -N            Disable automatic patch application
# -p<num>       Use -p<num> for patch application
%autosetup(a:b:cDn:TvNS:p:)\
%setup %{-a} %{-b} %{-c} %{-D} %{-n} %{-T} %{!-v:-q}\
%{-S:%global __scm %{-S*}}\
%{-S:%{expand:%__scm_setup_%{-S*} %{!-v:-q}}}\
%{!-N:%autopatch %{-v} %{-p:-p%{-p*}}}
